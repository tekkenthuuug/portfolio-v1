{
  "projects": [
    {
      "id": 0,
      "image": "common-steam-games.png",
      "link": "https://common-steam-games.vercel.app/",
      "repositories": [
        {
          "id": 0,
          "name": null,
          "link": "https://github.com/tekkenthuuug/new-common-steam-games"
        }
      ],
      "name": "CSG",
      "shortDesc": "Steam utility",
      "desc": "Common Steam Games is one of my most usable apps. Steam itself allows to compare only yours and your friends games. But if you have a lobby of 3+ people, this is not very convenient. We had the exact same problem and here is my solution. This is actually a second version of the app, where I have used Typescript, GraphQL, Appolo, Type-GraphQL on my own for the first time, and I've had a great experience building it. Also I've created my own package NPM type-steamapi with type defenitions for Steam API and partial Type-GraphQL support."
    },
    {
      "id": 1,
      "image": "the-riff-tool.png",
      "link": "https://therifftool.com/",
      "repositories": [],
      "name": "The Riff Tool",
      "shortDesc": "Youtube video looper",
      "desc": "This youtube video looper was very interesting to build! It also includes some paid functionallity, but, to be honest, it is not very secure, since my client wanted not to use any databases for saving loops, that's why they are stored on client-side. And for the same reason there was used a service for handling subscription plans, instead of creating our own system. Generally, it is a recreation of any other youtube looper, but with a few key differences: use inputs for timings, instead of draggable points on the line, so you can be more accurate, playback speed can be changed without breaking loop timings, you can save your loops for future use."
    },
    {
      "id": 2,
      "image": "wallesave.png",
      "link": "https://wallesave.netlify.app/",
      "repositories": [],
      "name": "Wallesave",
      "shortDesc": "Expense & incomes tracker",
      "desc": "This was my first paid project. Not only I was a developer here, but I've also been doing web and logo design. It is not very feature-rich project (customer decided to stop development process), but it has nice and responsive interface and different ways of user authentication."
    },
    {
      "id": 3,
      "image": "mikrogram.png",
      "link": "https://mikrogram.netlify.app/",
      "repositories": [
        {
          "id": 0,
          "name": null,
          "link": "https://github.com/tekkenthuuug/mikrogram"
        }
      ],
      "name": "Mikrogram",
      "shortDesc": "Image gallery",
      "desc": "This is one of my learning projects. Here I've tried out theming (styled-components), localization (i18n), uploading images to the storage (firebase storage) and animations with framer-motion (used for grid animation). Authentication is handled by firebase. This project was very interesting to build, since there was a lot of new technologies for me. And not only they were new, they also were very useful for real world applications. I'm thinking about improving this project in a future, for example adding likes and comments for the post."
    },
    {
      "id": 4,
      "image": "candy-shop.png",
      "link": "https://candy-shop-pz.netlify.app",
      "repositories": [
        {
          "id": 0,
          "name": "Front-end",
          "link": "https://github.com/tekkenthuuug/candy-shop"
        },
        {
          "id": 1,
          "name": "Back-end",
          "link": "https://github.com/tekkenthuuug/candy-shop-api"
        }
      ],
      "name": "Candy Shop",
      "shortDesc": "eCommerce app",
      "desc": "This project was created for my university assignment. The main idea behind this assignment was to learn, how to work as a team, but we've also managed to create a good project. Here I've learned a lot of things about Flask and Python, as well as SQL Databases and React Context API. Application has authentication system, items search, items filtering and orders history."
    },
    {
      "id": 5,
      "image": "crown-clothing.png",
      "link": "https://tekken-crown-live.herokuapp.com/",
      "repositories": [
        {
          "id": 0,
          "name": null,
          "link": "https://github.com/tekkenthuuug/crown-clothing"
        }
      ],
      "name": "Crown Clothing",
      "shortDesc": "eCommerce app",
      "desc": "This is one of my learning projects. Here I've been dealing with CSS-in-JS (styled-components), firebase, redux-saga, payment gateway (Stripe) for the first time. Authentication and storing application data is handled by Firebase Authenticaion and Firestore. At first, cart was stored only client-side (redux-persist), but then I moved it to Firestore, so cart is specific for the user account, not for device. I've also learned about reselect library and when it can be useful. Summarizing, I've really enjoyed using styled-components (it makes code really clean), firebase (no need to reacreate the same auth logic for every project). But even though I've understood basics of redux-saga, this concepts seemed to me a little overwhelming."
    }
  ]
}
